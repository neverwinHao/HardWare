C51 COMPILER V9.54   LUNAR                                                                 07/04/2023 12:50:35 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE LUNAR
OBJECT MODULE PLACED IN .\Objects\lunar.obj
COMPILER INVOKED BY: D:\keli5\C51\BIN\C51.EXE lunar.c OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\lunar
                    -.lst) OBJECT(.\Objects\lunar.obj)

line level    source

   1          /*
   2           * 公历转农历
   3          */
   4          
   5          #include "lunar.h"//包含头文件lunar_calendar.h
   6          #include "DS1302.h"//包含头文件DS1302.h
   7          
   8          
   9          static unsigned int LunarCalendarDay;
  10          
  11          static code unsigned long LunarCalendarTable[60] = {
  12              0x4D4AB8,0x0D4A4C,0x0DA541,0x25AAB6,0x056A49,0x7AADBD,0x025D52,0x092D47,0x5C95BA,0x0A954E,/*2001-2010*
             -/
  13              0x0B4A43,0x4B5537,0x0AD54A,0x955ABF,0x04BA53,0x0A5B48,0x652BBC,0x052B50,0x0A9345,0x474AB9,/*2011-2020*
             -/
  14              0x06AA4C,0x0AD541,0x24DAB6,0x04B64A,0x69573D,0x0A4E51,0x0D2646,0x5E933A,0x0D534D,0x05AA43,/*2021-2030*
             -/
  15              0x36B537,0x096D4B,0xB4AEBF,0x04AD53,0x0A4D48,0x6D25BC,0x0D254F,0x0D5244,0x5DAA38,0x0B5A4C,/*2031-2040*
             -/
  16              0x056D41,0x24ADB6,0x049B4A,0x7A4BBE,0x0A4B51,0x0AA546,0x5B52BA,0x06D24E,0x0ADA42,0x355B37,/*2041-2050*
             -/
  17              //0x09374B,0x8497C1,0x049753,0x064B48,0x66A53C,0x0EA54F,0x06B244,0x4AB638,0x0AAE4C,0x092E42,/*2051-206
             -0*/
  18          };
  19          static code unsigned char jieqi[]=
  20          { 
  21                 0x96,0xB4,0xA5,0xB5,0xA6,0xA6,0x87,0x88,0x88,0x78,0x87,0x86,     //2000   
  22                 0xA5,0xB3,0xA5,0xA5,0xA6,0xA6,0x88,0x88,0x88,0x78,0x87,0x87,     //2001   
  23                 0xA5,0xB4,0x96,0xA5,0x96,0x96,0x88,0x78,0x78,0x78,0x87,0x87,     //2002   
  24                 0x95,0xB4,0x96,0xA5,0x96,0x97,0x88,0x78,0x78,0x69,0x78,0x87,     //2003   
  25                 0x96,0xB4,0xA5,0xB5,0xA6,0xA6,0x87,0x88,0x88,0x78,0x87,0x86,     //2004   
  26                 0xA5,0xB3,0xA5,0xA5,0xA6,0xA6,0x88,0x88,0x88,0x78,0x87,0x87,     //2005   
  27                 0xA5,0xB4,0x96,0xA5,0xA6,0x96,0x88,0x88,0x78,0x78,0x87,0x87,     //2006   
  28                 0x95,0xB4,0x96,0xA5,0x96,0x97,0x88,0x78,0x78,0x69,0x78,0x87,     //2007   
  29                 0x96,0xB4,0xA5,0xB5,0xA6,0xA6,0x87,0x88,0x87,0x78,0x87,0x86,     //2008   
  30                 0xA5,0xB3,0xA5,0xB5,0xA6,0xA6,0x88,0x88,0x88,0x78,0x87,0x87,     //2009   
  31                 0xA5,0xB4,0x96,0xA5,0xA6,0x96,0x88,0x88,0x78,0x78,0x87,0x87,     //2010   
  32                 0x95,0xB4,0x96,0xA5,0x96,0x97,0x88,0x78,0x78,0x79,0x78,0x87,     //2011   
  33                 0x96,0xB4,0xA5,0xB5,0xA5,0xA6,0x87,0x88,0x87,0x78,0x87,0x86,     //2012   
  34                 0xA5,0xB3,0xA5,0xB5,0xA6,0xA6,0x87,0x88,0x88,0x78,0x87,0x87,     //2013   
  35                 0xA5,0xB4,0x96,0xA5,0xA6,0x96,0x88,0x88,0x78,0x78,0x87,0x87,     //2014   
  36                 0x95,0xB4,0x96,0xA5,0x96,0x97,0x88,0x78,0x78,0x79,0x77,0x87,     //2015   
  37                 0x95,0xB4,0xA5,0xB4,0xA5,0xA6,0x87,0x88,0x87,0x78,0x87,0x86,     //2016   
  38                 0xA5,0xC3,0xA5,0xB5,0xA6,0xA6,0x87,0x88,0x88,0x78,0x87,0x87,     //2017   
  39                 0xA5,0xB4,0xA6,0xA5,0xA6,0x96,0x88,0x88,0x78,0x78,0x87,0x87,     //2018   
  40                 0xA5,0xB4,0x96,0xA5,0x96,0x96,0x88,0x78,0x78,0x79,0x77,0x87,     //2019   
  41                 0x95,0xB4,0xA5,0xB4,0xA5,0xA6,0x97,0x87,0x87,0x78,0x87,0x86,     //2020   
  42                 0xA5,0xC3,0xA5,0xB5,0xA6,0xA6,0x87,0x88,0x88,0x78,0x87,0x86,     //2021   
  43                 0xA5,0xB4,0xA5,0xA5,0xA6,0x96,0x88,0x88,0x88,0x78,0x87,0x87,     //2022   
  44                 0xA5,0xB4,0x96,0xA5,0x96,0x96,0x88,0x78,0x78,0x79,0x77,0x87,     //2023   
  45                 0x95,0xB4,0xA5,0xB4,0xA5,0xA6,0x97,0x87,0x87,0x78,0x87,0x96,     //2024   
  46                 0xA5,0xC3,0xA5,0xB5,0xA6,0xA6,0x87,0x88,0x88,0x78,0x87,0x86,     //2025   
  47                 0xA5,0xB3,0xA5,0xA5,0xA6,0xA6,0x88,0x88,0x88,0x78,0x87,0x87,     //2026   
  48                 0xA5,0xB4,0x96,0xA5,0x96,0x96,0x88,0x78,0x78,0x78,0x87,0x87,     //2027   
C51 COMPILER V9.54   LUNAR                                                                 07/04/2023 12:50:35 PAGE 2   

  49                 0x95,0xB4,0xA5,0xB4,0xA5,0xA6,0x97,0x87,0x87,0x78,0x87,0x96,     //2028   
  50                 0xA5,0xC3,0xA5,0xB5,0xA6,0xA6,0x87,0x88,0x88,0x78,0x87,0x86,     //2029   
  51                 0xA5,0xB3,0xA5,0xA5,0xA6,0xA6,0x88,0x88,0x88,0x78,0x87,0x87,     //2030   
  52                 0xA5,0xB4,0x96,0xA5,0x96,0x96,0x88,0x78,0x78,0x78,0x87,0x87,     //2031   
  53                 0x95,0xB4,0xA5,0xB4,0xA5,0xA6,0x97,0x87,0x87,0x78,0x87,0x96,     //2032   
  54                 //0xA5,0xC3,0xA5,0xB5,0xA6,0xA6,0x88,0x88,0x88,0x78,0x87,0x86,     //2033   
  55                // 0xA5,0xB3,0xA5,0xA5,0xA6,0xA6,0x88,0x78,0x88,0x78,0x87,0x87,     //2034   
  56                 //0xA5,0xB4,0x96,0xA5,0xA6,0x96,0x88,0x88,0x78,0x78,0x87,0x87,     //2035   
  57              };
  58          static code int MonthAdd[12] = {0,31,59,90,120,151,181,212,243,273,304,334};
  59          
  60          static int LunarCalendar(int year,int month,int day)
  61          {
  62   1          int Spring_NY,Sun_NY,StaticDayCount;
  63   1          int index,flag;
  64   1      
  65   1          if( ((LunarCalendarTable[year-2001] & 0x0060) >> 5) == 1)
  66   1              Spring_NY = (LunarCalendarTable[year-2001] & 0x001F) - 1;
  67   1          else
  68   1              Spring_NY = (LunarCalendarTable[year-2001] & 0x001F) - 1 + 31;
  69   1      
  70   1          Sun_NY = MonthAdd[month-1] + day - 1;
  71   1      
  72   1          if( (!(year % 4)) && (month > 2))
  73   1              Sun_NY++;
  74   1          if (Sun_NY >= Spring_NY)
  75   1          {
  76   2              Sun_NY -= Spring_NY;
  77   2              month = 1;
  78   2              index = 1;
  79   2              flag = 0;
  80   2              if( ( LunarCalendarTable[year - 2001] & (0x80000 >> (index-1)) ) ==0)
  81   2                  StaticDayCount = 29;
  82   2              else
  83   2                  StaticDayCount = 30;
  84   2      
  85   2              while(Sun_NY >= StaticDayCount)
  86   2              {
  87   3                  Sun_NY -= StaticDayCount;
  88   3                  index++;
  89   3      
  90   3                  if(month == ((LunarCalendarTable[year - 2001] & 0xF00000) >> 20) )
  91   3                  {
  92   4                      flag = ~flag;
  93   4                      if(flag == 0)
  94   4                          month++;
  95   4                  }
  96   3                  else
  97   3                      month++;
  98   3                  if( ( LunarCalendarTable[year - 2001] & (0x80000 >> (index-1)) ) ==0)
  99   3                      StaticDayCount=29;
 100   3                  else
 101   3                      StaticDayCount=30;
 102   3              }
 103   2              day = Sun_NY + 1;
 104   2          }
 105   1          else//阳历日在春节前
 106   1          { 
 107   2              Spring_NY -= Sun_NY;
 108   2              year--;
 109   2              month = 12;
 110   2      
C51 COMPILER V9.54   LUNAR                                                                 07/04/2023 12:50:35 PAGE 3   

 111   2              if ( ((LunarCalendarTable[year - 2001] & 0xF00000) >> 20) == 0)
 112   2                  index = 12;
 113   2              else
 114   2                  index = 13;
 115   2                  
 116   2              flag = 0;
 117   2      
 118   2              if( ( LunarCalendarTable[year - 2001] & (0x80000 >> (index-1)) ) ==0)
 119   2                  StaticDayCount = 29;
 120   2              else
 121   2                  StaticDayCount = 30;
 122   2      
 123   2              while(Spring_NY > StaticDayCount)
 124   2              {
 125   3                  Spring_NY -= StaticDayCount;
 126   3                  index--;
 127   3      
 128   3                  if(flag == 0)
 129   3                      month--;
 130   3      
 131   3                  if(month == ((LunarCalendarTable[year - 2001] & 0xF00000) >> 20))
 132   3                      flag = ~flag;
 133   3      
 134   3                  if( ( LunarCalendarTable[year - 2001] & (0x80000 >> (index-1)) ) ==0)
 135   3                      StaticDayCount = 29;
 136   3                  else
 137   3                      StaticDayCount = 30;
 138   3               }
 139   2               day = StaticDayCount - Spring_NY + 1;
 140   2          }
 141   1      
 142   1          LunarCalendarDay = day;
 143   1          LunarCalendarDay |= (month << 6);
 144   1          if(month == ((LunarCalendarTable[year - 1901] & 0xF00000) >> 20))
 145   1              return 1;
 146   1          else
 147   1              return 0;
 148   1      
 149   1      }
 150          
 151          
 152          int lunar_calendar(int *solar, uchar *lunar)
 153          {
 154   1          int flag=0;
 155   1      
 156   1          if(LunarCalendar(solar[0],solar[1],solar[2]))
 157   1          {
 158   2              lunar[0] = (LunarCalendarDay & 0x3C0) >> 6;
 159   2                      flag = 1; //闰月
 160   2          }
 161   1          else
 162   1          {
 163   2              lunar[0] = (LunarCalendarDay & 0x3C0) >> 6;
 164   2          }
 165   1      
 166   1          lunar[1] = LunarCalendarDay & 0x3F;
 167   1          
 168   1          return flag;
 169   1      }
 170          void turnToLunar(TIME *t, uchar *lunar)
 171          {
 172   1              int solar[3];
C51 COMPILER V9.54   LUNAR                                                                 07/04/2023 12:50:35 PAGE 4   

 173   1      
 174   1              solar[0] = t->year+2000;
 175   1              solar[1] = t->mon;
 176   1              solar[2] = t->day;
 177   1      
 178   1              lunar_calendar(solar, lunar);
 179   1      }
 180          
 181          
 182          uchar getSolarIndex(TIME *t)
 183          {       uchar day=t->day;
 184   1              uchar temp;
 185   1              uint location=(t->year)*12+(t->mon)-1;
 186   1                  if(day<15)
 187   1              {
 188   2              temp=15-day;
 189   2              if((jieqi[location]>>4)==temp) return (t->mon*2-1);
 190   2              else return (0);
 191   2              }
 192   1          else if(day==15) return (0);
 193   1          else
 194   1              {
 195   2              temp=day-15;
 196   2              if((jieqi[location]&0x0f)==temp) return (t->mon*2);
 197   2              else return (0);
 198   2              }
 199   1          }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1155    ----
   CONSTANT SIZE    =    660    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2      38
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
